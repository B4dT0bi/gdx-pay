/*
 * Copyright 2013 Chris Banes
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 *
 */

/**
 * GDX-PAY remarks:
 *
 * Downloaded from https://raw.githubusercontent.com/chrisbanes/gradle-mvn-push/master/gradle-mvn-push.gradle
 * with small modifications:
 * GROUP --> GROUPID
 * VERSIONCODE --> VERSION
 * POM_ARTIFACT_ID --> ${project.name}
 * added getRepositoryUrl(), isLocalBuild()
 *
 * TODO: eliminate duplication between publish_android.gradle and publish_java.gradle
 */

apply plugin: 'maven-publish'
apply plugin: 'maven'
apply plugin: 'signing'

def isLocalBuild() {
    return hasProperty("LOCAL")
}

def isReleaseBuild() {
    return hasProperty("RELEASE")
}

def isSnapshotBuild() {
    return hasProperty("SNAPSHOT")
}

def getReleaseRepositoryUrl() {
    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
            : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
}

def getSnapshotRepositoryUrl() {
    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
            : "https://oss.sonatype.org/content/repositories/snapshots/"
}

def getRepositoryUsername() {
    return hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ""
}

def getLocalRepositoryUrl() {
    return hasProperty('LOCAL_REPOSITORY_URL') ? LOCAL_REPOSITORY_URL
            : 'file://' + new File(System.getProperty('user.home'), '.m2/repository').absolutePath
}

def getRepositoryUrl() {
    if (isLocalBuild()) {
        return getLocalRepositoryUrl()
    }

    if (isReleaseBuild()) {
        return getReleaseRepositoryUrl()
    }

    return getSnapshotRepositoryUrl()
}

def getRepositoryPassword() {
    return hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ""
}

afterEvaluate { project ->
    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                pom.groupId = GROUPID
                pom.artifactId =  "${project.name}"
                pom.version = VERSION

                if (isLocalBuild()) {
                    repository(url: getLocalRepositoryUrl())
                } else {
                    if (isReleaseBuild()) {
                        repository(url: getReleaseRepositoryUrl()) {
                            authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                        }
                    }
                    if (isSnapshotBuild()) {
                        snapshotRepository(url: getSnapshotRepositoryUrl()) {
                            authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                        }
                    }
                }

                pom.project {
                    name POM_NAME
                    packaging POM_PACKAGING
                    description POM_DESCRIPTION
                    url POM_URL

                    scm {
                        url POM_SCM_URL
                        connection POM_SCM_CONNECTION
                        developerConnection POM_SCM_DEV_CONNECTION
                    }

                    licenses {
                        license {
                            name POM_LICENCE_NAME
                            url POM_LICENCE_URL
                            distribution POM_LICENCE_DIST
                        }
                    }

                    developers {
                        developer {
                            id POM_DEVELOPER_ID_1
                            name POM_DEVELOPER_NAME_1
                        }
                        developer {
                            id POM_DEVELOPER_ID_2
                            name POM_DEVELOPER_NAME_2
                        }
                    }
                }
            }
        }
    }

    signing {
        required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    task androidJavadocs(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }

    task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
        classifier = 'javadoc'
        from androidJavadocs.destinationDir
    }

    task androidSourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.sourceFiles
    }

    artifacts {
        archives androidSourcesJar
        archives androidJavadocsJar
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            artifact "${project.buildDir}/outputs/aar/${project.name}-release.aar"
            artifactId = "${project.name}"
            groupId = "${rootProject.ext.GROUPID}"
            version = "${rootProject.ext.VERSION}"

            //The publication doesn't know about our dependencies, so we have to manually add them to the pom
            // See also: http://stackoverflow.com/questions/28827593/android-library-dependencies-missing-from-pom-with-gradle
            pom.withXml {
                // for dependencies and exclusions
                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.compile.allDependencies.each { ModuleDependency dp ->
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', dp.group)
                    dependencyNode.appendNode('artifactId', dp.name)
                    dependencyNode.appendNode('version', dp.version)

                    // for exclusions
                    if (dp.excludeRules.size() > 0) {
                        def exclusions = dependencyNode.appendNode('exclusions')
                        dp.excludeRules.each { ExcludeRule ex ->
                            def exclusion = exclusions.appendNode('exclusion')
                            exclusion.appendNode('groupId', ex.group)
                            exclusion.appendNode('artifactId', ex.module)
                        }
                    }
                }
            }
        }
    }

    repositories {
        maven {
            credentials {
                username getRepositoryUsername()
                password getRepositoryPassword()
            }
            url getRepositoryUrl()
        }
    }
}